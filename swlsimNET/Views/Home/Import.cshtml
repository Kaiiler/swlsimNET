@{
    ViewData["Title"] = "Import";
}

@model Settings
<div class="col-xs-12" style="height:110px;"></div>

<div>
    <h1>Import Character Stats</h1>
    <div class="col-lg-12" align="right">
        <label style="margin-right: 10px">Presets:</label>
        <button id="1" type="button" class="btn btn-purple waves-effect waves-light" onclick="presetHammer">Hammer</button>
        <button id="2" type="button" class="btn btn-purple waves-effect waves-light" onclick="presetBlood">Blood</button>
        <button id="3" type="button" class="btn btn-purple waves-effect waves-light" onclick="presetBlade">Blade</button>
        <button id="4" type="button" class="btn btn-purple waves-effect waves-light" onclick="presetChaos">Chaos</button>
        <button id="5" type="button" class="btn btn-purple waves-effect waves-light" onclick="presetElemental">Elemental</button>
        <button id="6" type="button" class="btn btn-purple waves-effect waves-light" onclick="presetPistols">Pistols</button>
        <button id="7" type="button" class="btn btn-purple waves-effect waves-light" onclick="presetFist">Fist</button>
        <button id="8" type="button" class="btn btn-purple waves-effect waves-light" onclick="presetShotgun">Shotgun</button>
        <button id="9" type="button" class="btn btn-purple waves-effect waves-light" onclick="presetRifle">Assault Rifle</button>
    </div>
    <form method="post" id="stats">
        <div class="col-md-3">


            @Html.LabelFor(m => m.PrimaryWeapon)
            @Html.ValidationMessageFor(m => m.PrimaryWeapon, "", new { @class = "text-danger" })
            @Html.DropDownListFor(m => m.PrimaryWeapon,
                Model.WeaponTypeList,
                "Select primary weapon", new { Class = "form-control select2" })

            @Html.LabelFor(m => m.SecondaryWeapon)
            @Html.ValidationMessageFor(m => m.SecondaryWeapon, "", new { @class = "text-danger" })
            @Html.DropDownListFor(m => m.SecondaryWeapon,
                Model.WeaponTypeList,
                "Select secondary weapon", new { Class = "form-control select2" })

            @Html.LabelFor(m => m.PrimaryWeaponAffix)
            @Html.ValidationMessageFor(m => m.PrimaryWeaponAffix, "", new { @class = "text-danger" })
            @Html.DropDownListFor(m => m.PrimaryWeaponAffix,
                Model.WeaponAffixesList,
                new { Class = "form-control select2" })

            @Html.LabelFor(m => m.SecondaryWeaponAffix)
            @Html.ValidationMessageFor(m => m.SecondaryWeaponAffix, "", new { @class = "text-danger" })
            @Html.DropDownListFor(m => m.SecondaryWeaponAffix,
                Model.WeaponAffixesList,
                new { Class = "form-control select2" })

            @Html.LabelFor(m => m.PrimaryWeaponProc)
            @Html.ValidationMessageFor(m => m.PrimaryWeaponProc, "", new { @class = "text-danger" })
            @Html.DropDownListFor(m => m.PrimaryWeaponProc,
                Model.WeaponProcList,
                new { Class = "form-control select2" })

            @Html.LabelFor(m => m.SecondaryWeaponProc)
            @Html.ValidationMessageFor(m => m.SecondaryWeaponProc, "", new { @class = "text-danger" })
            @Html.DropDownListFor(m => m.SecondaryWeaponProc,
                Model.WeaponProcList,
                new { Class = "form-control select2" })

            @Html.LabelFor(m => m.Neck)
            @Html.ValidationMessageFor(m => m.Neck, "", new { @class = "text-danger" })
            @Html.DropDownListFor(m => m.Neck,
                Model.NeckTalismanList,
                new { Class = "form-control select2" })

            @Html.LabelFor(m => m.Luck)
            @Html.ValidationMessageFor(m => m.Luck, "", new { @class = "text-danger" })
            @Html.DropDownListFor(m => m.Luck,
                Model.LuckTalismanList,
                new { Class = "form-control select2" })

            @Html.LabelFor(m => m.Head)
            @Html.ValidationMessageFor(m => m.Head, "", new { @class = "text-danger" })
            @Html.DropDownListFor(m => m.Head,
                Model.HeadTalismanList,
                new { Class = "form-control select2" })

            @Html.LabelFor(m => m.Gadget)
            @Html.ValidationMessageFor(m => m.Gadget, "", new { @class = "text-danger" })
            @Html.DropDownListFor(m => m.Gadget,
                Model.GadgetList,
                new { Class = "form-control select2" })

            @Html.LabelFor(m => m.CombatPower)
            @Html.ValidationMessageFor(m => m.CombatPower, "", new { @class = "text-danger" })
            @Html.TextBoxFor(m => m.CombatPower, new { Class = "form-control" })

            @Html.LabelFor(m => m.GlanceReduction)
            @Html.ValidationMessageFor(m => m.GlanceReduction, "", new { @class = "text-danger" })
            @Html.TextBoxFor(m => m.GlanceReduction, new { Class = "form-control" })

            @Html.LabelFor(m => m.CriticalChance)
            @Html.ValidationMessageFor(m => m.CriticalChance, "", new { @class = "text-danger" })
            @Html.TextBoxFor(m => m.CriticalChance, new { Class = "form-control" })

            @Html.LabelFor(m => m.CritPower)
            @Html.ValidationMessageFor(m => m.CritPower, "", new { @class = "text-danger" })
            @Html.TextBoxFor(m => m.CritPower, new { Class = "form-control" })

            @Html.LabelFor(m => m.BasicSignet)
            @Html.ValidationMessageFor(m => m.BasicSignet, "", new { @class = "text-danger" })
            @Html.TextBoxFor(m => m.BasicSignet, new { Class = "form-control" })

            @Html.LabelFor(m => m.PowerSignet)
            @Html.ValidationMessageFor(m => m.PowerSignet, "", new { @class = "text-danger" })
            @Html.TextBoxFor(m => m.PowerSignet, new { Class = "form-control" })

            @Html.LabelFor(m => m.EliteSignet)
            @Html.ValidationMessageFor(m => m.EliteSignet, "", new { @class = "text-danger" })
            @Html.TextBoxFor(m => m.EliteSignet, new { Class = "form-control" })

            @Html.LabelFor(m => m.WaistSignet)
            @Html.ValidationMessageFor(m => m.WaistSignet, "", new { @class = "text-danger" })
            @Html.TextBoxFor(m => m.WaistSignet, new { Class = "form-control" })

        </div>

        <div class="col-md-9" style="margin-bottom: 10px">
            @Html.LabelFor(m => m.Apl)
            @Html.ValidationMessageFor(m => m.Apl, "", new { @class = "text-danger" })
            @Html.TextAreaFor(m => m.Apl, new { Class = "form-control" })
        </div>

        @*TODO: Make JS*@
        @*<div class="col-md-9" style="margin-bottom: 10px">
                <input type="submit" value="Blood/Fist" formaction=@Url.Action("SetPresetBloodFist") formmethod="post" class="btn btn-primary" />
                <input type="submit" value="Hammer/Fist" formaction=@Url.Action("SetPresetHammerFist") formmethod="post" class="btn btn-primary" />
                <input type="submit" value="Hammer/Pistol" formaction=@Url.Action("SetPresetHammerPistol") formmethod="post" class="btn btn-primary" />
                <input type="submit" value="Hammer/Shotgun" formaction=@Url.Action("SetPresetHammerShotgun") formmethod="post" class="btn btn-primary" />
            </div>*@

        <div class="col-md-9" style="margin-bottom: 10px">
            @Html.LabelFor(m => m.Passives)
            @*@Html.ValidationMessageFor(m => m.Passives, "", new { @class = "text-danger" })*@
            @Html.DropDownListFor(m => m.Passive1, Model.Passives, new { Class = "form-control select2" })
            @Html.DropDownListFor(m => m.Passive2, Model.Passives, new { Class = "form-control select2" })
            @Html.DropDownListFor(m => m.Passive3, Model.Passives, new { Class = "form-control select2" })
            @Html.DropDownListFor(m => m.Passive4, Model.Passives, new { Class = "form-control select2" })
            @Html.DropDownListFor(m => m.Passive5, Model.Passives, new { Class = "form-control select2" })
        </div>
        <div id="checkbox-container">
            <div>
                @Html.CheckBoxFor(m => m.OpeningShot)
                @Html.LabelFor(m => m.OpeningShot)
            </div>

            <div>
                @Html.CheckBoxFor(m => m.Exposed)
                @Html.LabelFor(m => m.Exposed)
            </div>

            <div>
                @Html.CheckBoxFor(m => m.HeadSignetIsCdr)
                @Html.LabelFor(m => m.HeadSignetIsCdr)
            </div>
            <div>
                @Html.CheckBoxFor(m => m.Savagery)
                @Html.LabelFor(m => m.Savagery)
            </div>
        </div>
        <input type="submit" value="Start Simulation" formaction=@Url.Action("Import") formmethod="post" class="btn btn-default waves-effect waves-light" />

    </form>

    <div id="full-width-modal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="full-width-modalLabel" aria-hidden="true" style="display: none;">
        <div class="modal-dialog modal-full">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <h4 class="modal-title" id="full-width-modalLabel">Save & Load</h4>
                </div>
                <div class="modal-body">
                    <h4>Here you can save & load your settings. (WIP)</h4>
                    <button class="loginBtn loginBtn--facebook">
                        Login with Facebook
                    </button>

                    <button class="loginBtn loginBtn--google">
                        Login with Google
                    </button>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default waves-effect" data-dismiss="modal">Save & Close</button>
                    <button type="button" class="btn btn-primary waves-effect waves-light">Load</button>

                </div>
            </div>
        </div>
    </div>

    <div class="col-md-12" style="margin-bottom: 10px"></div>
    <button style="margin-top: 10px" class="btn btn-primary waves-effect waves-light" data-toggle="modal" data-target="#full-width-modal">Login</button>
</div>

<script type="text/javascript">


    function onLoad() {

        persistInput(window.inputElement);
        ['Apl', 'PrimaryWeapon', 'SecondaryWeapon', 'PrimaryWeaponProc', 'SecodaryWeaponProc',
            'PrimaryWeaponAffix', 'SecondaryWeaponAffix', 'Neck', 'Luck', 'Head', 'Gadget',
            'CombatPower', 'GlanceReduction', 'CriticalChance', 'CritPower',
            'Basic Signet', 'PowerSignet', 'EliteSignet', 'WaistSignet',
            'Passive1', 'Passive2', 'Passive3', 'Passive4', 'Passive5'
        ]
            .map(document.getElementById.bind(document))
            .map(persistInput);
        $.each(checkboxValues, function (key, value) {
            $("#" + key).prop('checked', value);
        });
    }
    document.addEventListener("click", presetHammer);
    function presetHammer() {
        localStorage.setItem('input-PrimaryWeapon', 'Hammer');
        localStorage.setItem('input-PrimaryWeaponAffix', 'Destruction');
        localStorage.setItem('input-PrimaryWeaponProc', null);
        localStorage.setItem('input-SecondaryWeapon', 'Fist');
        localStorage.setItem('input-Passive1', 'Outrage');
        localStorage.setItem('input-Passive2', 'UnbridledWrath');
        localStorage.setItem('input-Passive3', 'Annihilate');
        localStorage.setItem('input-Passive4', 'Berserker');
        localStorage.setItem('input-Passive5', 'FastAndFurious');
        localStorage.setItem('input-Apl',
            "Fist.Savagery, Buff.UnstoppableForce.Active\r\n" +
            "Hammer.Seethe, Buff.UnstoppableForce.Active\r\n" +
            "Hammer.UnstoppableForce, Rage > 50 || Hammer.Energy > 8\r\n" +
            "Hammer.Demolish, Buff.UnstoppableForce.Active\r\n" +
            "Hammer.Demolish, Rage > 60 || Hammer.Energy > 13\r\n" +
            "Hammer.Smash");
    };
    document.addEventListener("click", presetBlood);
    function presetBlood() {
        localStorage.setItem('input-PrimaryWeapon', 'Blood');
        localStorage.setItem('input-PrimaryWeaponAffix', 'Destruction');
        localStorage.setItem('input-PrimaryWeaponProc', null);
        localStorage.setItem('input-SecondaryWeapon', 'Fist');
        localStorage.setItem('input-Passive1', 'CrimsonPulse');
        localStorage.setItem('input-Passive2', 'Desolate');
        localStorage.setItem('input-Passive3', 'Defilement');
        localStorage.setItem('input-Passive4', 'Flay');
        localStorage.setItem('input-Passive5', 'Containate');
        localStorage.setItem('input-Apl',
            "Fist.Savagery, Corruption >= 10 && EldritchScourge.Cooldown <= 0 && Desecrate.Cooldown <= 0\r\n" +
            "Blood.EldritchScourge, Corruption > 0 && Buff.Savagery.Active\r\n" +
            "Blood.Desecrate, Buff.Savagery.Active\r\n" +
            "Blood.Maleficium, Blood.Energy > 10\r\n" +
            "Blood.Torment");
    };

    document.addEventListener("DOMContentLoaded", onLoad);

    function persistInput(input) {
        if (input == null) return;

        var key = "input-" + input.id;
        var storedValue = localStorage.getItem(key);

        if (storedValue)
            input.value = storedValue;

        input.addEventListener('input', function () {
            localStorage.setItem(key, input.value);
        });
    }

    var checkboxValues = JSON.parse(localStorage.getItem('checkboxValues')) || {},
        $checkboxes = $('#OpeningShot, #Exposed, #HeadSignetIsCdr, #Savagery');

    $checkboxes.on("change", function () {
        $checkboxes.each(function () {
            checkboxValues[this.id] = this.checked;
        });

        localStorage.setItem("checkboxValues", JSON.stringify(checkboxValues));
    });

</script>